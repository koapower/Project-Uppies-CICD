name: 🧪 Test - Step 4 Deploy Workflow

on:
  workflow_dispatch:
    inputs:
      runnerMain:
        type: string
        required: true
        default: 'ubuntu-latest'
      runnerMacos:
        type: string
        required: true
        default: 'macos-latest'
      buildType:
        description: "Build type: 'preview' for manual/dev builds, 'release_candidate' for staging (e.g., v1.2.3-rc.1), 'release' for production (e.g., v1.2.3)"
        required: true
        default: "release"
        type: choice
        options:
          - preview
          - release_candidate
          - release
      artifactSource:
        description: "Whether deployment files comes from a fresh build or an existing release"
        required: true
        default: "build"
        type: choice
        options:
          - build
          - release
      buildVersion:
        description: "Optional version string (e.g. v1.2.3 or v1.2.3-rc.1). Leave blank to auto-generate (e.g. PR-0001, manual-main)"
        required: false
        default: "v0.0.0"
        type: string
      projectName:
        description: "Project name for artifacts"
        required: true
        default: "Unity_CI_Templates"
      buildTargets:
        description: "JSON array of build targets to build for"
        required: true
        default: '["Android", "WebGL", "StandaloneLinux64-Client", "StandaloneLinux64-Server", "StandaloneWindows", "StandaloneWindows64", "StandaloneOSX", "iOS"]'
      deployTargets:
        description: "JSON array of deploy targets (e.g. [\"itch.io\",\"s3\"])"
        required: true
        default: '["itch.io", "appcenter", "firebase", "s3", "gh-pages", "steam", "testflight", "custom-server"]'
        type: string

permissions:
  contents: write

jobs:
  # ─────────────────────────────────────────────────────────────────────────────
  # Release Deployment Preparation
  # ─────────────────────────────────────────────────────────────────────────────
  validate_release:
    name: Validate Release Tag and Artifacts
    runs-on: ${{ inputs.runnerMain }}
    defaults:
      run:
        shell: bash
    if:  ${{ inputs.artifactSource == 'release' }}
    outputs:
      hasCombinedArtifacts: ${{ steps.check.outputs.hasCombinedArtifacts }}
    steps:
      - name: Install GitHub CLI
        shell: bash
        run: |
          if command -v gh &> /dev/null; then
            echo "GitHub CLI already installed."
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install gh -y
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install gh
          else
            echo "Please ensure GitHub CLI is installed on your Windows runner." >&2
            exit 1
          fi

      - name: Check GitHub Release Exists and Artifacts
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Checking if release '${{ inputs.buildVersion }}' exists..." | tee -a "$GITHUB_STEP_SUMMARY"

          # Attempt to fetch release data and save to file
          if ! gh api repos/${{ github.repository }}/releases/tags/${{ inputs.buildVersion }} --jq '.' > release.json; then
            echo "❌ Release '${{ inputs.buildVersion }}' not found or API call failed." | tee -a "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          echo "✅ Release found. Redeploying: '${{ inputs.buildVersion }}'..." | tee -a "$GITHUB_STEP_SUMMARY"

          # Load release data
          RELEASE_DATA=$(cat release.json)

          # Check for combined artifact
          COMBINED_FOUND=$(echo "$RELEASE_DATA" | jq -r '.assets[]?.name' | grep -c 'all-platforms' || true)
          if [ "$COMBINED_FOUND" -gt 0 ]; then
            echo "✅ Combined artifact detected." | tee -a "$GITHUB_STEP_SUMMARY"
            echo "hasCombinedArtifacts=true" >> "$GITHUB_OUTPUT"
          else
            echo "ℹ️ No combined artifact detected." | tee -a "$GITHUB_STEP_SUMMARY"
            echo "hasCombinedArtifacts=false" >> "$GITHUB_OUTPUT"
          fi

  # ─────────────────────────────────────────────────────────────────────────────
  # Build Deployment Preparation
  # ─────────────────────────────────────────────────────────────────────────────
  prepare_metadata:
    name: ⏳ Prepare Metadata
    if:  ${{ inputs.artifactSource == 'build' }}
    uses: ./.github/workflows/prepare-metadata.yml
    with:
      runnerMain: ${{ inputs.runnerMain }}
      runnerMacos: ${{ inputs.runnerMacos }}
      unityVersion: ${{ vars.UNITY_VERSION }}
      projectName: ${{ inputs.projectName }}
      skipTests: true
      testsOnly: false
      buildTargets: ${{ inputs.buildTargets }}
      deployTargets: ${{ inputs.deployTargets }}
      buildType: ${{ inputs.buildType }}
      buildVersion: ${{ inputs.buildVersion }}

  dry_build:
    name: 🧩 Create Dry-Build
    needs: prepare_metadata
    if:  ${{ inputs.artifactSource == 'build' }}
    uses: ./.github/workflows/dry-build.yml
    with:
      unityVersion: ${{ needs.prepare_metadata.outputs.unityVersion }}
      buildVersion: ${{ needs.prepare_metadata.outputs.buildVersion }}
      buildType: ${{ needs.prepare_metadata.outputs.buildType }}
      projectName: ${{ needs.prepare_metadata.outputs.projectName }}
      buildTargets: ${{ inputs.buildTargets }}
      combineArtifacts: ${{ needs.prepare_metadata.outputs.requiresCombined }}
    secrets: inherit

  # ─────────────────────────────────────────────────────────────────────────────
  # Test Deployment Steps
  # ─────────────────────────────────────────────────────────────────────────────
  test_deploy_from_build:
    name: 🌍 Test Deploy From Build
    needs: 
        - prepare_metadata 
        - dry_build
    if:  ${{ needs.prepare_metadata.outputs.validDeployTargets != '[]' && inputs.artifactSource == 'build' }}
    uses: ./.github/workflows/step-4-deploy.yml
    with:
      runnerMain: ${{ inputs.runnerMain }}
      runnerMacos: ${{ inputs.runnerMacos }}
      buildType: ${{ inputs.buildType }}
      buildVersion: ${{ inputs.buildVersion }}
      projectName: ${{ needs.prepare_metadata.outputs.projectName }}
      deployTargets: ${{ needs.prepare_metadata.outputs.validDeployTargets }}
      buildTargets: ${{ inputs.buildTargets }}
      hasCombinedArtifacts: ${{ needs.prepare_metadata.outputs.requiresCombined }}
      artifactSource: ${{ inputs.artifactSource }}
    secrets:
      CICD_PAT: ${{ secrets.CICD_PAT }}
      BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      DEPLOY_API_KEY: ${{ secrets.DEPLOY_API_KEY }}
      ITCH_USERNAME: ${{ secrets.ITCH_USERNAME }}
      ITCH_PROJECT: ${{ secrets.ITCH_PROJECT }}
      APPCENTER_OWNER_NAME: ${{ secrets.APPCENTER_OWNER_NAME }}
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      STEAM_USERNAME: ${{ secrets.STEAM_USERNAME }}
      STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}
      STEAM_APP_ID: ${{ secrets.STEAM_APP_ID }}
      STEAM_DEPOT_VDF_PATH: ${{ secrets.STEAM_DEPOT_VDF_PATH }}
      APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
      APPSTORE_API_ISSUER_ID: ${{ secrets.APPSTORE_API_ISSUER_ID }}
      APPSTORE_API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
      CUSTOM_SERVER_HOST: ${{ secrets.CUSTOM_SERVER_HOST }}
      CUSTOM_SERVER_USER: ${{ secrets.CUSTOM_SERVER_USER }}
      CUSTOM_SERVER_KEY: ${{ secrets.CUSTOM_SERVER_KEY }}

  test_deploy_from_release:
    name: 🌍 Test Deploy From Release
    needs: validate_release
    if:  ${{ inputs.artifactSource == 'release' }}
    uses: ./.github/workflows/step-4-deploy.yml
    with:
      runnerMain: ${{ inputs.runnerMain }}
      runnerMacos: ${{ inputs.runnerMacos }}
      buildType: ${{ inputs.buildType }}
      buildVersion: ${{ inputs.buildVersion }}
      projectName: ${{ vars.PROJECT_NAME }}
      deployTargets: ${{ inputs.deployTargets }}
      buildTargets: '[]'
      hasCombinedArtifacts: ${{ needs.validate_release.outputs.hasCombinedArtifacts }}
      artifactSource: release
    secrets:
      CICD_PAT: ${{ secrets.CICD_PAT }}
      DEPLOY_API_KEY: ${{ secrets.DEPLOY_API_KEY }}
      ITCH_USERNAME: ${{ secrets.ITCH_USERNAME }}
      ITCH_PROJECT: ${{ secrets.ITCH_PROJECT }}
      APPCENTER_OWNER_NAME: ${{ secrets.APPCENTER_OWNER_NAME }}
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      STEAM_USERNAME: ${{ secrets.STEAM_USERNAME }}
      STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}
      STEAM_APP_ID: ${{ secrets.STEAM_APP_ID }}
      STEAM_DEPOT_VDF_PATH: ${{ secrets.STEAM_DEPOT_VDF_PATH }}
      APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
      APPSTORE_API_ISSUER_ID: ${{ secrets.APPSTORE_API_ISSUER_ID }}
      APPSTORE_API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
      CUSTOM_SERVER_HOST: ${{ secrets.CUSTOM_SERVER_HOST }}
      CUSTOM_SERVER_USER: ${{ secrets.CUSTOM_SERVER_USER }}
      CUSTOM_SERVER_KEY: ${{ secrets.CUSTOM_SERVER_KEY }}