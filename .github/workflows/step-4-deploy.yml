name: üåç Step 4 - Deploy

on:
  workflow_call:
    inputs:
      runnerMain:
        type: string
        required: true
      runnerMacos:
        type: string
        required: true
      buildType:
        type: string
        required: true
      buildVersion:
        description: "The version/tag name (e.g., v1.2.3)"
        type: string
        required: true
      projectName:
        type: string
        required: true
      hasCombinedArtifacts:
        description: "Whether a combined artifact folder has been created"
        required: true
        default: 'false'
        type: string
      deployTargets:
        description: "JSON array of deploy targets (e.g. ['itch.io','appcenter','firebase','s3','gh-pages'])"
        required: false
        default: '[]'
        type: string
      buildTargets:
        description: "JSON array of build targets (e.g. [\"WebGL\",\"iOS\"])"
        required: true
        default: '[]'
        type: string
      artifactSource:
        description: "Source of deployment artifacts (build or release)"
        required: false
        default: 'build'
        type: string
    secrets:
      CICD_PAT: { required: true }
      BUTLER_API_KEY: { required: false }
      DEPLOY_API_KEY: { required: false }
      ITCH_USERNAME: { required: false }
      ITCH_PROJECT: { required: false }
      APPCENTER_OWNER_NAME: { required: false }
      FIREBASE_TOKEN: { required: false }
      AWS_ACCESS_KEY_ID: { required: false }
      AWS_SECRET_ACCESS_KEY: { required: false }
      S3_BUCKET: { required: false }
      STEAM_USERNAME: { required: false }
      STEAM_PASSWORD: { required: false }
      STEAM_APP_ID: { required: false }
      STEAM_DEPOT_VDF_PATH: { required: false }
      APPSTORE_API_KEY_ID: { required: false }
      APPSTORE_API_ISSUER_ID: { required: false }
      APPSTORE_API_PRIVATE_KEY: { required: false }
      CUSTOM_SERVER_HOST: { required: false }
      CUSTOM_SERVER_USER: { required: false }
      CUSTOM_SERVER_KEY: { required: false }

jobs:
  resolve_deploy_matrix:
    uses: ./.github/workflows/resolve-deploy-matrix.yml
    with:
      runnerMain: ${{ inputs.runnerMain }}
      runnerMacos: ${{ inputs.runnerMacos }}
      validTargets: ${{ inputs.deployTargets }}

  deploy:
    name: üöÄ Deploy ${{ matrix.target }} on ${{ matrix.os }}
    needs: resolve_deploy_matrix
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.resolve_deploy_matrix.outputs.matrix) }}
    env:
      DEPLOY_DIR: deployment-artifacts
      PROJECT_DIR: ${{ inputs.projectName }}-${{ inputs.buildVersion }}
      ARTIFACT_DIR: deployment-artifacts/${{ inputs.projectName }}-${{ inputs.buildVersion }}
    steps:
      - name: üì• Retrieve Artifacts from Release
        uses: avalin/unity-ci-templates/.github/actions/download-from-release@main
        with:
          projectName: ${{ inputs.projectName }}
          version: ${{ inputs.buildVersion }}
          githubRepository: ${{ github.repository }}
          githubToken: ${{ secrets.CICD_PAT }}
          hasCombinedArtifacts: ${{ inputs.hasCombinedArtifacts }}
          requiredBuildTargetsJson: '${{ toJson(matrix.requiredBuildTargets) }}'

      # Download combined artifact (single)
      - name: üì• Retrieve Artifacts from Build (Combined)
        if: ${{ inputs.artifactSource == 'build' && inputs.hasCombinedArtifacts == 'true' }}
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.ARTIFACT_DIR }}
          name: ${{ env.PROJECT_DIR }}

      - name: üì• Retrieve Artifacts from Build (Per-Build-Target)
        if: ${{ inputs.artifactSource == 'build' && inputs.hasCombinedArtifacts == 'false' }}
        uses: avalin/unity-ci-templates/.github/actions/download-per-build-target-artifacts-from-build@main
        with:
          artifactDir: ${{ env.ARTIFACT_DIR }}
          projectName: ${{ inputs.projectName }}
          version: ${{ inputs.buildVersion }}
          requiredBuildTargets: '${{ toJson(matrix.requiredBuildTargets) }}'
        env:
          GH_TOKEN: ${{ secrets.CICD_PAT }}

      - name: üõ†Ô∏è Normalize Artifact Layout (Release Per-Build-Target Only)
        if: ${{ inputs.artifactSource == 'release' && inputs.hasCombinedArtifacts == 'false' }}
        uses: avalin/unity-ci-templates/.github/actions/normalize-artifact-layout@main
        with:
          artifactDir: ${{ env.ARTIFACT_DIR }}

      - name: üßæ List Artifacts
        run: ls -R "$DEPLOY_DIR" || echo "No artifacts found."

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ GitHub Pages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üîç Check WebGL Build Exists
        if: matrix.target == 'gh-pages'
        run: |
          if [ ! -d "${ARTIFACT_DIR}/WebGL" ]; then
            echo "‚ùå WebGL build not found. Cannot deploy to GitHub Pages."
            exit 1
          fi

      - name: üîé Detect WebGL Compression Format
        id: detect-compression
        uses: avalin/unity-ci-templates/.github/actions/detect-webgl-compression@main
        with:
          artifactDir: ${{ env.ARTIFACT_DIR }}

      - name: ü©π Patch & Decompress Unity WebGL for GitHub Pages
        if: ${{ matrix.target == 'gh-pages' && steps.detect-compression.outputs.needs_patch == 'true' }}
        uses: avalin/unity-ci-templates/.github/actions/patch-webgl-for-gh-pages@main
        with:
          artifactDir: ${{ env.ARTIFACT_DIR }}

      - name: üåç Deploy to GitHub Pages
        if: matrix.target == 'gh-pages'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.CICD_PAT }}
          publish_dir: "./${{ env.ARTIFACT_DIR }}/WebGL"

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ itch.io ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: ü§µ Install Butler
        if: matrix.target == 'itch.io'
        uses: remarkablegames/setup-butler@v1

      - name: üïπÔ∏è Deploy to itch.io
        if: matrix.target == 'itch.io'
        run: |
          if [ -z "${{ secrets.ITCH_USERNAME }}" ] || [ -z "${{ secrets.ITCH_PROJECT }}" ]; then
            echo "‚ö†Ô∏è Missing itch.io credentials."; 
            exit 1;
          fi
          TARGET_CHANNEL=""
          for build_target in $(echo "$REQUIRED_BUILD_TARGETS" | jq -r '.[]'); do
            TARGET_CHANNEL="unknown"
            case "$build_target" in
              Android) TARGET_CHANNEL="android" ;;
              WebGL) TARGET_CHANNEL="webgl" ;;
              StandaloneLinux64-Client) TARGET_CHANNEL="linux-client" ;;
              StandaloneLinux64-Server) TARGET_CHANNEL="linux-server" ;;
              StandaloneWindows) TARGET_CHANNEL="windows-32" ;;
              StandaloneWindows64) TARGET_CHANNEL="windows-64" ;;
              StandaloneOSX) TARGET_CHANNEL="osx-desktop" ;;
              iOS) TARGET_CHANNEL="osx-ios" ;;
            esac
            echo "‚û°Ô∏è Pushing $ARTIFACT_DIR/$build_target to itch.io channel $TARGET_CHANNEL"
            butler push "$ARTIFACT_DIR/$build_target" "${{ secrets.ITCH_USERNAME }}/${{ secrets.ITCH_PROJECT }}:$TARGET_CHANNEL" --userversion "$VERSION"
          done
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
          REQUIRED_BUILD_TARGETS: '${{ toJson(matrix.requiredBuildTargets) }}'
          VERSION: ${{ inputs.buildVersion }}

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ App Center ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üì± Deploy to App Center
        if: matrix.target == 'appcenter'
        run: |
          if [ -z "${{ secrets.APPCENTER_OWNER_NAME }}" ] || [ -z "${{ secrets.DEPLOY_API_KEY }}" ]; then
            echo "‚ö†Ô∏è Missing App Center credentials."; 
            exit 1;
          fi
          FILES=$(find "$ARTIFACT_DIR" -type f \( -name "*.apk" -o -name "*.aab" -o -name "*.ipa" \))
          if [ -z "$FILES" ]; then echo "‚ùå No mobile artifacts found."; exit 1; fi

          for file in $FILES; do
            echo "üöÄ Deploying $file"
            npx appcenter distribute release \
              --app "${{ secrets.APPCENTER_OWNER_NAME }}/${{ inputs.projectName }}" \
              --file "$file" \
              --group "Testers" \
              --token "${{ secrets.DEPLOY_API_KEY }}"
          done

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Firebase ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üî• Deploy to Firebase Hosting
        if: matrix.target == 'firebase'
        run: |
          if [ -z "${{ secrets.FIREBASE_TOKEN }}" ]; then
            echo "‚ö†Ô∏è Missing Firebase token."; 
            exit 1;
          fi
          cd "${{ env.ARTIFACT_DIR }}/WebGL" || exit 1
          npm install -g firebase-tools
          firebase deploy --token "${{ secrets.FIREBASE_TOKEN }}"

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ AWS S3 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: ‚òÅÔ∏è Deploy to AWS S3
        if: matrix.target == 's3'
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] || [ -z "${{ secrets.S3_BUCKET }}" ]; then
            echo "‚ö†Ô∏è Missing AWS credentials or bucket."; 
            exit 1;
          fi
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws s3 sync "${{ env.ARTIFACT_DIR }}/WebGL" "s3://${{ secrets.S3_BUCKET }}" --delete

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Steam ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üéÆ Deploy to Steam
        if: matrix.target == 'steam'
        run: |
          VDF_PATH="${{ secrets.STEAM_DEPOT_VDF_PATH }}"
          if [ -z "$VDF_PATH" ]; then
            VDF_PATH="$ARTIFACT_DIR/steam/app_build.vdf"
          fi

          if [ -z "${{ secrets.STEAM_USERNAME }}" ] || [ -z "${{ secrets.STEAM_PASSWORD }}" ] || [ -z "${{ secrets.STEAM_APP_ID }}" ]; then
            echo "‚ö†Ô∏è Missing Steam credentials or App ID."; 
            exit 1;
          fi

          echo "üõ†Ô∏è Installing SteamCMD..."
          mkdir -p ~/steamcmd && cd ~/steamcmd
          curl -sSL https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz | tar -xz

          echo "üîë Logging into Steam and triggering build..."
          ./steamcmd.sh +login "${{ secrets.STEAM_USERNAME }}" "${{ secrets.STEAM_PASSWORD }}" +run_app_build "$VDF_PATH" +quit

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Custom Server ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üñ•Ô∏è Deploy to Custom Server (via SCP or Rsync)
        if: matrix.target == 'custom-server'
        run: |
          if [ -z "${{ secrets.CUSTOM_SERVER_HOST }}" ] || [ -z "${{ secrets.CUSTOM_SERVER_USER }}" ] || [ -z "${{ secrets.CUSTOM_SERVER_KEY }}" ]; then
            echo "‚ö†Ô∏è Missing custom server credentials."; 
            exit 1;
          fi

          echo "‚û°Ô∏è Deploying to custom server..."
          mkdir -p ~/.ssh
          echo "${{ secrets.CUSTOM_SERVER_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.CUSTOM_SERVER_HOST }}" >> ~/.ssh/known_hosts

          rsync -avz "$ARTIFACT_DIR/" "${{ secrets.CUSTOM_SERVER_USER }}@${{ secrets.CUSTOM_SERVER_HOST }}:/var/www/mygame/"
        env:
          CUSTOM_SERVER_HOST: ${{ secrets.CUSTOM_SERVER_HOST }}
          CUSTOM_SERVER_USER: ${{ secrets.CUSTOM_SERVER_USER }}
          CUSTOM_SERVER_KEY: ${{ secrets.CUSTOM_SERVER_KEY }}

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ TestFlight ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üçè Deploy .ipa to TestFlight
        if: matrix.target == 'testflight'
        run: |
          if [ -z "${{ secrets.APPSTORE_API_KEY_ID }}" ] || [ -z "${{ secrets.APPSTORE_API_ISSUER_ID }}" ] || [ -z "${{ secrets.APPSTORE_API_PRIVATE_KEY }}" ]; then
            echo "‚ö†Ô∏è Missing App Store Connect API credentials."; 
            exit 1;
          fi

          FILE=$(find "$ARTIFACT_DIR" -type f -name "*.ipa" | head -n 1)
          if [ -z "$FILE" ]; then echo "‚ùå No .ipa found to upload."; exit 1; fi

          echo "${{ secrets.APPSTORE_API_PRIVATE_KEY }}" > private_key.p8

          echo "üöÄ Uploading $FILE to TestFlight..."
          xcrun altool \
            --upload-app \
            --type ios \
            --file "$FILE" \
            --apiKey "${{ secrets.APPSTORE_API_KEY_ID }}" \
            --apiIssuer "${{ secrets.APPSTORE_API_ISSUER_ID }}" \
            --private-key-path private_key.p8
          rm private_key.p8
        env:
          FASTLANE_DISABLE_COLORS: 1

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Summary ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üìå Store Deployment Result
        if: always()
        run: |
          mkdir -p deployment-results
          RESULT_FILE="deployment-results/${{ matrix.target }}.json"

          STATUS="‚úÖ"
          NOTE="Deployed successfully"

          if [ "${{ job.status }}" != "success" ]; then
            STATUS="‚ùå"
            NOTE="Deployment failed or incomplete"
          elif [ ! -d "$ARTIFACT_DIR" ]; then
            STATUS="‚ùå"
            NOTE="No deployment artifacts found"
          fi

          echo "{\"status\": \"$STATUS\", \"note\": \"$NOTE\"}" > "$RESULT_FILE"

      - name: üì§ Upload Deployment Result Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-results-${{ matrix.target }}
          path: deployment-results
          retention-days: 1

  summarize_deploy:
    if: always()
    uses: ./.github/workflows/summarize-deploys.yml
    needs: deploy
    with:
      runnerMain: ${{ inputs.runnerMain }}
      projectName: ${{ inputs.projectName }}
      buildVersion: ${{ inputs.buildVersion }}
      buildType: ${{ inputs.buildType }}